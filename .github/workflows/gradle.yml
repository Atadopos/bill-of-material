name: Java CI with Maven

on:
  push:
    tags:
      - '*'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
        include:
          - os: ubuntu-latest
            profile: linux
          - os: windows-latest
            profile: windows
          - os: macos-latest
            profile: mac
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 1.17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Install Inno Setup
        if: matrix.profile == 'windows'
        run: |
          choco install innosetup

      - name: Cache Gradle Wrapper and packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Build with Gradle
        run: ./gradlew clean packageMyApp

      - name: Upload DEB artifact for Linux
        uses: actions/upload-artifact@v2
        with:
          name: Application-Linux
          path: ./build/*.deb
        if: matrix.profile == 'linux'

      - name: Upload RPM artifact for Linux
        uses: actions/upload-artifact@v2
        with:
          name: Application-Linux
          path: ./build/*.rpm
        if: matrix.profile == 'linux'

      - name: Upload AppImage artifact for Linux
        uses: actions/upload-artifact@v2
        with:
          name: Application-Linux
          path: ./build/*.AppImage
        if: matrix.profile == 'linux'

      - name: Upload EXE artifact for Windows
        uses: actions/upload-artifact@v2
        with:
          name: Application-Windows
          path: ./build/*.exe
        if: matrix.profile == 'windows'

      - name: Upload DMG artifact for macOS
        uses: actions/upload-artifact@v2
        with:
          name: Application-macOS
          path: ./build/*.dmg
        if: matrix.profile == 'mac'

#    - name: Get the version
#      id: get_version
#      run: echo ::set-output name=VERSION::$(cat VERSION)
#
#    - name: Create Release
#      id: create_release
#      uses: actions/create-release@v1
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      with:
#        tag_name: ${{ steps.get_version.outputs.VERSION }}
#        release_name: Release ${{ steps.get_version.outputs.VERSION }}
#        draft: false
#        prerelease: false
#
#    - name: Upload DEB Release Asset
#      if: matrix.profile == 'linux'
#      id: upload-deb-release-asset
#      uses: actions/upload-release-asset@v1
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      with:
#        upload_url: ${{ steps.create_release.outputs.upload_url }}
#        asset_path: ./build/*.deb
#        asset_name: bill-of-material.deb
#        asset_content_type: application/octet-stream
#
#    - name: Upload EXE Release Asset
#      if: matrix.profile == 'windows'
#      id: upload-exe-release-asset
#      uses: actions/upload-release-asset@v1
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      with:
#        upload_url: ${{ steps.create_release.outputs.upload_url }}
#        asset_path: ./build/*.exe
#        asset_name: bill-of-material.exe
#        asset_content_type: application/octet-stream
#
#    - name: Upload AppImage Release Asset
#      if: matrix.profile == 'linux'
#      id: upload-appimage-release-asset
#      uses: actions/upload-release-asset@v1
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      with:
#        upload_url: ${{ steps.create_release.outputs.upload_url }}
#        asset_path: ./build/*.AppImage
#        asset_name: bill-of-material.AppImage
#        asset_content_type: application/octet-stream
#
#    - name: Upload DMG Release Asset
#      if: matrix.profile == 'mac'
#      id: upload-dmg-release-asset
#      uses: actions/upload-release-asset@v1
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      with:
#        upload_url: ${{ steps.create_release.outputs.upload_url }}
#        asset_path: ./build/*.dmg
#        asset_name: bill-of-material.dmg
#        asset_content_type: application/octet-stream